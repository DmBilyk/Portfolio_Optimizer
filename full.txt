
#src.ui.widgets.stock_chart_widget.py

from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QMessageBox, QPushButton
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import yfinance as yf
from matplotlib.dates import DateFormatter
import matplotlib.dates as mdates
import numpy as np



class StockChartWidget(QWidget):
    def __init__(self, portfolio_manager, stock_manager):
        super().__init__()
        self.portfolio_manager = portfolio_manager
        self.stock_manager = stock_manager
        self.annotation = None
        self.current_data = None

        self.layout = QVBoxLayout()


        self.portfolio_selector = QComboBox()
        self.portfolio_selector.addItem("Select Portfolio")
        self.load_portfolios()
        self.portfolio_selector.currentIndexChanged.connect(self.update_stock_selector)


        self.stock_selector = QComboBox()
        self.stock_selector.addItem("Select Stock")
        self.stock_selector.setEnabled(False)


        self.period_selector = QComboBox()
        self.period_selector.addItems(['1MO', '3MO', '6MO', '1Y', '2Y'])
        self.period_selector.currentTextChanged.connect(self.update_chart)


        self.refresh_button = QPushButton("Refresh")
        self.refresh_button.clicked.connect(self.update_chart)


        controls_layout = QHBoxLayout()
        controls_layout.addWidget(QLabel("Portfolio:"))
        controls_layout.addWidget(self.portfolio_selector)
        controls_layout.addWidget(QLabel("Stock:"))
        controls_layout.addWidget(self.stock_selector)
        controls_layout.addWidget(QLabel("Period:"))
        controls_layout.addWidget(self.period_selector)
        controls_layout.addWidget(self.refresh_button)


        plt.style.use('seaborn-v0_8-darkgrid')
        self.figure = plt.figure(figsize=(10, 6))
        self.ax = self.figure.add_subplot(111)


        self.ax.set_facecolor('#f0f0f0')
        self.figure.patch.set_facecolor('white')

        self.canvas = FigureCanvas(self.figure)


        self.canvas.mpl_connect('motion_notify_event', self.on_hover)


        self.layout.addLayout(controls_layout)
        self.layout.addWidget(self.canvas)

        self.setLayout(self.layout)


        self.portfolio_selector.currentIndexChanged.connect(self.update_stock_selector)
        self.stock_selector.currentIndexChanged.connect(self.update_chart)

    def load_portfolios(self):
        portfolios = self.portfolio_manager.get_all_portfolios()
        self.portfolio_selector.clear()
        self.portfolio_selector.addItem("Select Portfolio")
        for port_id, name in portfolios:
            self.portfolio_selector.addItem(name, port_id)

    def update_stock_selector(self):
        self.stock_selector.clear()
        self.stock_selector.addItem("Select Stock")

        current_index = self.portfolio_selector.currentIndex()
        if current_index <= 0:
            self.stock_selector.setEnabled(False)
            return

        portfolio_id = self.portfolio_selector.currentData()
        stocks = self.stock_manager.get_portfolio_stocks(portfolio_id)

        for _, symbol, _, _ in stocks:
            self.stock_selector.addItem(symbol)

        self.stock_selector.setEnabled(True)

    def on_hover(self, event):
        if event.inaxes != self.ax or self.current_data is None:
            if self.annotation:
                self.annotation.set_visible(False)
                self.canvas.draw_idle()
            return


        x_data = mdates.date2num(self.current_data.index)
        y_data = self.current_data['Close'].values


        x_dist = np.abs(x_data - event.xdata)
        closest_idx = np.argmin(x_dist)


        max_distance = (x_data[-1] - x_data[0]) / len(x_data) * 2
        if x_dist[closest_idx] > max_distance:
            if self.annotation:
                self.annotation.set_visible(False)
                self.canvas.draw_idle()
            return

        date = self.current_data.index[closest_idx]
        price = y_data[closest_idx]


        if self.annotation:
            self.annotation.set_visible(False)


        text = f'Date: {date.strftime("%Y-%m-%d")}\nPrice: ${price:.2f}'


        self.annotation = self.ax.annotate(
            text,
            xy=(mdates.date2num(date), price),
            xytext=(10, 10), textcoords='offset points',
            bbox=dict(boxstyle='round,pad=0.5', fc='white', ec='gray', alpha=0.8),
            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0')
        )

        self.canvas.draw_idle()

    def update_chart(self):
        if (self.portfolio_selector.currentIndex() <= 0 or
                self.stock_selector.currentIndex() <= 0):
            return

        stock = self.stock_selector.currentText()
        period = self.period_selector.currentText()

        try:
            ticker = yf.Ticker(stock)
            hist = ticker.history(period=period)

            # Check if we received valid data
            if hist.empty or len(hist) == 0:
                QMessageBox.warning(self, "Error", f"No data available for {stock} for the selected period.")
                return

            # Check if 'Close' column exists and has data
            if 'Close' not in hist.columns or hist['Close'].empty:
                QMessageBox.warning(self, "Error", f"Price data missing for {stock}.")
                return

            self.current_data = hist

            self.ax.clear()

            # Only plot if we have valid data with matching dimensions
            if len(hist.index) > 0 and len(hist['Close']) > 0 and len(hist.index) == len(hist['Close']):
                self.ax.plot(hist.index, hist['Close'],
                             label='Close Price',
                             color='#2196F3',
                             linewidth=2)

                self.ax.scatter(hist.index, hist['Close'],
                                color='#2196F3',
                                s=10,
                                alpha=0.0)

                # Change the title format to match the expected format in the test
                self.ax.set_title(f"{stock} - Price Dynamics",
                                  fontsize=16,
                                  fontweight='bold',
                                  pad=20)

                self.ax.set_xlabel('Date',
                                   fontsize=12,
                                   fontweight='bold',
                                   labelpad=10)

                self.ax.set_ylabel('Price (USD)',
                                   fontsize=12,
                                   fontweight='bold',
                                   labelpad=10)

                self.ax.grid(True,
                             linestyle='--',
                             alpha=0.7,
                             color='#757575')

                self.ax.legend(facecolor='white',
                               framealpha=1,
                               shadow=True)

                self.ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))
                self.ax.xaxis.set_major_locator(mdates.AutoDateLocator())
                plt.xticks(rotation=45, ha='right')

                self.figure.tight_layout(pad=2.0)

                self.annotation = None

                self.canvas.draw()
            else:
                QMessageBox.warning(self, "Error", "Invalid data dimensions for plotting.")

        except Exception as e:
            QMessageBox.warning(self, "Error", f"Could not fetch stock data: {str(e)}")

#src.domain.stock.py

from typing import List, Optional
from ..data.database import Database
from ..data.models import  Stock


class StockManager:
    def __init__(self, db: Database):
        self.db = db

    def add_stock(self, portfolio_id: int, symbol: str, quantity: int, price: float) -> int:
        existing_stock = self.db.cursor.execute(
            "SELECT id, quantity FROM stock WHERE portfolio_id = ? AND symbol = ?",
            (portfolio_id, symbol)
        ).fetchone()

        if existing_stock:

            stock_id, existing_quantity = existing_stock
            new_quantity = existing_quantity + quantity
            self.update_stock_quantity(stock_id, new_quantity)
            return stock_id
        else:

            self.db.cursor.execute(
                "INSERT INTO stock (portfolio_id, symbol, quantity, price) VALUES (?, ?, ?, ?)",
                (portfolio_id, symbol, quantity, price)
            )
            self.db.connection.commit()
            return self.db.cursor.lastrowid

    def remove_stock(self, stock_id: int) -> bool:
        try:
            self.db.cursor.execute(
                "DELETE FROM stock WHERE id = ?",
                (stock_id,)
            )
            self.db.connection.commit()
            return True
        except Exception:
            return False

    def update_stock_quantity(self, stock_id: int, quantity: int) -> bool:
        try:
            self.db.cursor.execute(
                "UPDATE stock SET quantity = ? WHERE id = ?",
                (quantity, stock_id)
            )
            self.db.connection.commit()
            return True
        except Exception:
            return False

    def get_portfolio_stocks(self, portfolio_id: int) -> List[tuple]:
        self.db.cursor.execute(
            "SELECT id, symbol, quantity, price FROM stock WHERE portfolio_id = ?",
            (portfolio_id,)
        )
        return self.db.cursor.fetchall()

    def get_stock(self, stock_id: int) -> Optional[Stock]:
        self.db.cursor.execute(
            "SELECT symbol, quantity, price FROM stock WHERE id = ?",
            (stock_id,)
        )
        result = self.db.cursor.fetchone()
        return Stock(result[0], result[1], result[2]) if result else None

#src.test.test_stock_chart.py
import unittest
from unittest.mock import Mock, patch, MagicMock
import pandas as pd
import numpy as np
import datetime
from matplotlib.figure import Figure
from matplotlib.axes import Axes
import matplotlib.dates as mdates


from PySide6.QtWidgets import QApplication, QMessageBox
import sys
from src.ui.widgets.stock_chart import StockChartWidget


app = QApplication.instance()
if not app:
    app = QApplication(sys.argv)


class TestStockChartWidget(unittest.TestCase):
    def setUp(self):

        self.mock_portfolio_manager = Mock()
        self.mock_stock_manager = Mock()


        self.mock_portfolio_manager.get_all_portfolios.return_value = [
            (1, "Test Portfolio 1"),
            (2, "Test Portfolio 2")
        ]


        self.mock_stock_manager.get_portfolio_stocks.return_value = [
            (1, "AAPL", 100, 150.0),
            (2, "MSFT", 50, 300.0)
        ]


        self.widget = StockChartWidget(self.mock_portfolio_manager, self.mock_stock_manager)


        self.mock_portfolio_manager.reset_mock()
        self.mock_stock_manager.reset_mock()

    def tearDown(self):

        self.widget = None

    def test_initialization(self):

        self.assertIsNotNone(self.widget.portfolio_selector)
        self.assertIsNotNone(self.widget.stock_selector)
        self.assertIsNotNone(self.widget.period_selector)
        self.assertIsNotNone(self.widget.refresh_button)
        self.assertIsNotNone(self.widget.figure)
        self.assertIsNotNone(self.widget.ax)
        self.assertIsNotNone(self.widget.canvas)


        self.assertEqual(self.widget.portfolio_selector.count(), 3)
        self.assertEqual(self.widget.portfolio_selector.itemText(0), "Select Portfolio")
        self.assertEqual(self.widget.stock_selector.count(), 1)
        self.assertFalse(self.widget.stock_selector.isEnabled())
        self.assertEqual(self.widget.period_selector.count(), 5)

    def test_load_portfolios(self):

        self.mock_portfolio_manager.reset_mock()


        self.widget.load_portfolios()


        self.mock_portfolio_manager.get_all_portfolios.assert_called_once()


        self.assertEqual(self.widget.portfolio_selector.count(), 3)
        self.assertEqual(self.widget.portfolio_selector.itemText(1), "Test Portfolio 1")
        self.assertEqual(self.widget.portfolio_selector.itemData(1), 1)
        self.assertEqual(self.widget.portfolio_selector.itemText(2), "Test Portfolio 2")
        self.assertEqual(self.widget.portfolio_selector.itemData(2), 2)

    def test_update_stock_selector_no_portfolio_selected(self):

        self.widget.portfolio_selector.setCurrentIndex(0)


        self.widget.update_stock_selector()


        self.assertFalse(self.widget.stock_selector.isEnabled())
        self.assertEqual(self.widget.stock_selector.count(), 1)
        self.assertEqual(self.widget.stock_selector.itemText(0), "Select Stock")

    def test_update_stock_selector_with_portfolio(self):

        self.widget.portfolio_selector.setCurrentIndex(1)


        self.widget.update_stock_selector()


        self.mock_stock_manager.get_portfolio_stocks.assert_called_with(1)


        self.assertTrue(self.widget.stock_selector.isEnabled())
        self.assertEqual(self.widget.stock_selector.count(), 3)
        self.assertEqual(self.widget.stock_selector.itemText(1), "AAPL")
        self.assertEqual(self.widget.stock_selector.itemText(2), "MSFT")

    @patch('yfinance.Ticker')
    def test_update_chart_valid_data(self, mock_ticker):

        dates = pd.date_range(start='2023-01-01', periods=10, freq='D')
        mock_data = pd.DataFrame({
            'Open': np.random.randn(10) + 100,
            'High': np.random.randn(10) + 102,
            'Low': np.random.randn(10) + 98,
            'Close': np.random.randn(10) + 101,
            'Volume': np.random.randint(1000000, 10000000, 10)
        }, index=dates)


        mock_ticker_instance = Mock()
        mock_ticker_instance.history.return_value = mock_data
        mock_ticker.return_value = mock_ticker_instance


        self.widget.portfolio_selector.setCurrentIndex(1)
        self.widget.update_stock_selector()
        self.widget.stock_selector.setCurrentIndex(1)
        self.widget.period_selector.setCurrentIndex(0)


        with patch.object(self.widget.canvas, 'draw'):

            self.widget.update_chart()


            mock_ticker.assert_called_with("AAPL")
            mock_ticker_instance.history.assert_called_with(period='1MO')


            self.assertIsNotNone(self.widget.current_data)
            pd.testing.assert_frame_equal(self.widget.current_data, mock_data)


            self.assertEqual(self.widget.ax.get_title(), "AAPL - Price Dynamics")
            self.assertEqual(self.widget.ax.get_xlabel(), "Date")
            self.assertEqual(self.widget.ax.get_ylabel(), "Price (USD)")

    @patch('yfinance.Ticker')
    def test_update_chart_empty_data(self, mock_ticker):

        mock_ticker_instance = Mock()
        mock_ticker_instance.history.return_value = pd.DataFrame()
        mock_ticker.return_value = mock_ticker_instance


        self.widget.portfolio_selector.setCurrentIndex(1)
        self.widget.update_stock_selector()
        self.widget.stock_selector.setCurrentIndex(1)


        with patch.object(QMessageBox, 'warning') as mock_warning:

            self.widget.update_chart()


            mock_warning.assert_called_once()

            self.assertEqual(mock_warning.call_args[0][0], self.widget)
            self.assertEqual(mock_warning.call_args[0][1], "Error")

            self.assertIn("No data available", mock_warning.call_args[0][2])

    @patch('yfinance.Ticker')
    def test_update_chart_missing_close_column(self, mock_ticker):

        dates = pd.date_range(start='2023-01-01', periods=10, freq='D')
        mock_data = pd.DataFrame({
            'Open': np.random.randn(10) + 100,
            'High': np.random.randn(10) + 102,
            'Low': np.random.randn(10) + 98,

            'Volume': np.random.randint(1000000, 10000000, 10)
        }, index=dates)


        mock_ticker_instance = Mock()
        mock_ticker_instance.history.return_value = mock_data
        mock_ticker.return_value = mock_ticker_instance


        self.widget.portfolio_selector.setCurrentIndex(1)
        self.widget.update_stock_selector()
        self.widget.stock_selector.setCurrentIndex(1)


        with patch.object(QMessageBox, 'warning') as mock_warning:
            # Call the method
            self.widget.update_chart()


            mock_warning.assert_called_once()

            self.assertEqual(mock_warning.call_args[0][0], self.widget)
            self.assertEqual(mock_warning.call_args[0][1], "Error")
            self.assertIn("Price data missing", mock_warning.call_args[0][2])

    @patch('yfinance.Ticker')
    def test_update_chart_exception(self, mock_ticker):

        mock_ticker_instance = Mock()
        mock_ticker_instance.history.side_effect = Exception("Test error")
        mock_ticker.return_value = mock_ticker_instance


        self.widget.portfolio_selector.setCurrentIndex(1)
        self.widget.update_stock_selector()
        self.widget.stock_selector.setCurrentIndex(1)


        with patch.object(QMessageBox, 'warning') as mock_warning:

            self.widget.update_chart()


            mock_warning.assert_called_once()

            self.assertEqual(mock_warning.call_args[0][0], self.widget)
            self.assertEqual(mock_warning.call_args[0][1], "Error")
            self.assertIn("Could not fetch stock data", mock_warning.call_args[0][2])
            self.assertIn("Test error", mock_warning.call_args[0][2])

    def test_on_hover_no_data(self):

        mock_event = Mock()
        mock_event.inaxes = None


        self.widget.on_hover(mock_event)


        self.assertIsNone(self.widget.annotation)

    @patch('matplotlib.axes.Axes.annotate')
    def test_on_hover_with_data(self, mock_annotate):

        dates = pd.date_range(start='2023-01-01', periods=10, freq='D')
        mock_data = pd.DataFrame({
            'Close': [100, 101, 102, 103, 104, 105, 106, 107, 108, 109]
        }, index=dates)
        self.widget.current_data = mock_data


        mock_event = Mock()
        mock_event.inaxes = self.widget.ax

        mock_event.xdata = mdates.date2num(dates[5])
        mock_event.ydata = 105


        mock_annotation = Mock()
        mock_annotate.return_value = mock_annotation


        with patch.object(self.widget.canvas, 'draw_idle'):
            self.widget.on_hover(mock_event)


            mock_annotate.assert_called_once()

            annotation_text = mock_annotate.call_args[0][0]
            self.assertIn("2023-01-06", annotation_text)
            self.assertIn("$105.00", annotation_text)


if __name__ == '__main__':
    unittest.main()

