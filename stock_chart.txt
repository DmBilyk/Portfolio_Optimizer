from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QLabel, QComboBox, QMessageBox, QPushButton
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
import matplotlib.pyplot as plt
import yfinance as yf
from matplotlib.dates import DateFormatter
import matplotlib.dates as mdates
import numpy as np
from datetime import datetime


class StockChartWidget(QWidget):
    def __init__(self, portfolio_manager, stock_manager):
        super().__init__()
        self.portfolio_manager = portfolio_manager
        self.stock_manager = stock_manager
        self.annotation = None
        self.current_data = None

        self.layout = QVBoxLayout()

        # Set dark theme for Qt widgets
        self.setStyleSheet("""
            QWidget { background-color: #1e1e1e; color: #ffffff; }
            QComboBox { background-color: #2d2d2d; border: 1px solid #3d3d3d; padding: 5px; }
            QPushButton { background-color: #2d2d2d; border: 1px solid #3d3d3d; padding: 5px; }
            QLabel { color: #ffffff; }
        """)

        self.portfolio_selector = QComboBox()
        self.portfolio_selector.addItem("Select Portfolio")
        self.load_portfolios()
        self.portfolio_selector.currentIndexChanged.connect(self.update_stock_selector)

        self.stock_selector = QComboBox()
        self.stock_selector.addItem("Select Stock")
        self.stock_selector.setEnabled(False)

        self.period_selector = QComboBox()
        self.period_selector.addItems(['1MO', '3MO', '6MO', '1Y', '2Y'])
        self.period_selector.currentTextChanged.connect(self.update_chart)

        self.refresh_button = QPushButton("Refresh")
        self.refresh_button.clicked.connect(self.update_chart)

        controls_layout = QHBoxLayout()
        controls_layout.addWidget(QLabel("Portfolio:"))
        controls_layout.addWidget(self.portfolio_selector)
        controls_layout.addWidget(QLabel("Stock:"))
        controls_layout.addWidget(self.stock_selector)
        controls_layout.addWidget(QLabel("Period:"))
        controls_layout.addWidget(self.period_selector)
        controls_layout.addWidget(self.refresh_button)

        # Set dark theme for matplotlib
        plt.style.use('dark_background')
        self.figure = plt.figure(figsize=(10, 6))
        self.ax = self.figure.add_subplot(111)

        # Configure dark theme colors
        self.ax.set_facecolor('#1e1e1e')
        self.figure.patch.set_facecolor('#1e1e1e')

        self.canvas = FigureCanvas(self.figure)
        self.canvas.mpl_connect('motion_notify_event', self.on_hover)

        self.layout.addLayout(controls_layout)
        self.layout.addWidget(self.canvas)

        self.setLayout(self.layout)

        self.portfolio_selector.currentIndexChanged.connect(self.update_stock_selector)
        self.stock_selector.currentIndexChanged.connect(self.update_chart)

    def load_portfolios(self):
        portfolios = self.portfolio_manager.get_all_portfolios()
        self.portfolio_selector.clear()
        self.portfolio_selector.addItem("Select Portfolio")
        for port_id, name in portfolios:
            self.portfolio_selector.addItem(name, port_id)

    def update_stock_selector(self):
        self.stock_selector.clear()
        self.stock_selector.addItem("Select Stock")

        current_index = self.portfolio_selector.currentIndex()
        if current_index <= 0:
            self.stock_selector.setEnabled(False)
            return

        portfolio_id = self.portfolio_selector.currentData()
        stocks = self.stock_manager.get_portfolio_stocks(portfolio_id)

        for _, symbol, _, _ in stocks:
            self.stock_selector.addItem(symbol)

        self.stock_selector.setEnabled(True)

    def on_hover(self, event):
        if event.inaxes != self.ax or self.current_data is None:
            if self.annotation:
                self.annotation.set_visible(False)
                self.canvas.draw_idle()
            return

        x_data = mdates.date2num(self.current_data.index)
        y_data = self.current_data['Close'].values

        x_dist = np.abs(x_data - event.xdata)
        closest_idx = np.argmin(x_dist)

        max_distance = (x_data[-1] - x_data[0]) / len(x_data) * 2
        if x_dist[closest_idx] > max_distance:
            if self.annotation:
                self.annotation.set_visible(False)
                self.canvas.draw_idle()
            return

        date = self.current_data.index[closest_idx]
        price = y_data[closest_idx]

        if self.annotation:
            self.annotation.set_visible(False)

        # Calculate price change for tooltip
        prev_price = y_data[closest_idx - 1] if closest_idx > 0 else price
        price_change = price - prev_price
        price_change_pct = (price_change / prev_price * 100) if prev_price != 0 else 0

        text = f'Date: {date.strftime("%Y-%m-%d")}\nPrice: ${price:.2f}\nChange: ${price_change:.2f} ({price_change_pct:.2f}%)'

        self.annotation = self.ax.annotate(
            text,
            xy=(mdates.date2num(date), price),
            xytext=(10, 10), textcoords='offset points',
            bbox=dict(boxstyle='round,pad=0.5', fc='#2d2d2d', ec='#3d3d3d', alpha=0.9),
            color='white',
            arrowprops=dict(arrowstyle='->', connectionstyle='arc3,rad=0', color='white')
        )

        self.canvas.draw_idle()

    def update_chart(self):
        if (self.portfolio_selector.currentIndex() <= 0 or
                self.stock_selector.currentIndex() <= 0):
            return

        stock = self.stock_selector.currentText()
        period = self.period_selector.currentText()

        try:
            ticker = yf.Ticker(stock)
            hist = ticker.history(period=period)
            self.current_data = hist

            self.ax.clear()

            # Calculate daily returns
            daily_returns = hist['Close'].pct_change()

            # Create color array based on price movement
            colors = np.where(daily_returns > 0, '#00ff00',  # Green for up
                    np.where(daily_returns < 0, '#ff0000',   # Red for down
                            '#ffffff'))                      # White for flat

            # Plot line segments with colors
            for i in range(1, len(hist)):
                self.ax.plot(hist.index[i-1:i+1], hist['Close'].iloc[i-1:i+1],
                           color=colors[i], linewidth=2)

            # Add scatter points for hover functionality
            self.ax.scatter(hist.index, hist['Close'],
                          color='none',
                          s=10,
                          alpha=0.0)

            self.ax.set_title(f"{stock} Stock Price",
                            fontsize=16,
                            fontweight='bold',
                            color='white',
                            pad=20)

            self.ax.set_xlabel('Date',
                             fontsize=12,
                             fontweight='bold',
                             color='white',
                             labelpad=10)

            self.ax.set_ylabel('Price (USD)',
                             fontsize=12,
                             fontweight='bold',
                             color='white',
                             labelpad=10)

            # Configure grid
            self.ax.grid(True,
                        linestyle='--',
                        alpha=0.3,
                        color='#ffffff')

            # Configure tick colors
            self.ax.tick_params(colors='white')
            for spine in self.ax.spines.values():
                spine.set_color('white')

            self.ax.xaxis.set_major_formatter(DateFormatter('%Y-%m-%d'))
            self.ax.xaxis.set_major_locator(mdates.AutoDateLocator())
            plt.xticks(rotation=45, ha='right')

            self.figure.tight_layout(pad=2.0)

            self.annotation = None

            self.canvas.draw()

        except Exception as e:
            QMessageBox.warning(self, "Error", f"Could not fetch stock data: {str(e)}")